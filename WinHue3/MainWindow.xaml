<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WinHue3"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:resx="clr-namespace:WinHue3.Resources"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        x:Class="WinHue3.MainWindow"
        Title="WinHue 3" Height="842" Width="1207" WindowStartupLocation="CenterScreen" MinHeight="600" MinWidth="803" Icon="Resources/HueGroupOn-Large.png" Closing="Window_Closing" ContentRendered="Window_ContentRendered" MouseEnter="Window_MouseEnter" MouseLeave="Window_MouseLeave" ResizeMode="CanResizeWithGrip" KeyUp="Window_KeyUp" Loaded="Window_Loaded" >

    <Window.Resources>
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
        </Style>
    </Window.Resources>
    <DockPanel LastChildFill="False" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
        <Ribbon x:Name="rbnMainRibbon" VerticalAlignment="Top" DockPanel.Dock="Top" >
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu SmallImageSource="icon.ico">
                    <RibbonApplicationMenuItem x:Name="mnuAppSettings" Header="{x:Static resx:GUI.MainForm_Menu_Settings}" Click="Settings_Click" ImageSource="Resources/gear_in.png" />
                    <RibbonApplicationMenuItem x:Name="mnuAppBridgePairing" Header="{x:Static resx:GUI.MainForm_Menu_BridgePairing}" ImageSource="Resources/bridgeAdd.png" Command="{Binding DoBridgePairingCommand}" />
                    <RibbonSeparator/>
                    <RibbonApplicationMenuItem Header="{x:Static resx:GUI.MainForm_Menu_Quit}" Click="Quit_Click" ImageSource="Resources/door_open.png"/>
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>
            <Ribbon.QuickAccessToolBar>
                <RibbonQuickAccessToolBar/>
            </Ribbon.QuickAccessToolBar>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_Home}" HorizontalAlignment="Stretch" VerticalAlignment="Center" >
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Search}" LargeImageSource="Resources/UpdateSearch.png">
                    <RibbonButton x:Name="btnSearchLights" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchLight}" LargeImageSource="Resources/HueLightSearch.png" IsEnabled="{Binding EnableSearchLights, FallbackValue=false}" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchLight}" SmallImageSource="Resources/HueLightSearch.png" Command="{Binding SearchNewLightsCommand}"/>
                    <RibbonButton x:Name="btnSearchSensors" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchSensor}" IsEnabled="{Binding EnableSearchSensors, FallbackValue=false}" LargeImageSource="Resources/SensorSearch.png" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchSensor}" SmallImageSource="Resources/SensorSearch.png" Command="{Binding SearchNewSensorsCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Commands}">
                    <RibbonButton x:Name="btnAllOn" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllON}"   VerticalAlignment="Center" LargeImageSource="Resources/HueGroupOn-Large.png" IsEnabled="{Binding EnableControls, FallbackValue=false}" SmallImageSource="Resources/HueGroupOn.png" Command="{Binding AllOnCommand}"/>
                    <RibbonButton x:Name="btnAllOff" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllOFF}"  VerticalAlignment="Center" LargeImageSource="Resources/HueGroupOff-Large.png" IsEnabled="{Binding EnableControls, FallbackValue=false}" SmallImageSource="Resources/HueGroupOff.png" Command="{Binding AllOffCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Refresh}" >
                    <RibbonButton x:Name="btnRefresh" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_RefreshButton}"  LargeImageSource="Resources/1409707765_reload.png" IsEnabled="{Binding EnableControls, FallbackValue=false}" SmallImageSource="Resources/1409707765_reload.png" Command="{Binding RefreshViewCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators}">
                    <RibbonButton x:Name="btnCreateGroup" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateGroup}" IsEnabled="{Binding EnableControls, FallbackValue=false}" LargeImageSource="Resources/HueGroupOn-Large.png" SmallImageSource="Resources/HueGroupOn.png" Command="{Binding CreateGroupCommand}"/>
                    <RibbonButton x:Name="btnScene" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateScene}"  IsEnabled="{Binding EnableControls, FallbackValue=false}" LargeImageSource="Resources/SceneLarge.png" SmallImageSource="Resources/SceneLarge.png" Command="{Binding CreateSceneCommand}"/>
                    <RibbonButton x:Name="btnCreateSchedule" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSchedule}" IsEnabled="{Binding CanSchedule, FallbackValue=false}" LargeImageSource="Resources/SchedulesLarge.png" SmallImageSource="Resources/SchedulesSmall.png" Command="{Binding CreateScheduleCommand}"/>
                    <RibbonButton x:Name="btnCreateRule" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateRule}" IsEnabled="{Binding EnableControls, FallbackValue=false}" LargeImageSource="Resources/rules.png" SmallImageSource="Resources/rules.png" Command="{Binding CreateRuleCommand}"/>
                    <RibbonButton x:Name="btnCreateSensor" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSensor}" IsEnabled="{Binding EnableControls, FallbackValue=false}" LargeImageSource="Resources/sensor.png" SmallImageSource="Resources/sensor.png" Command="{Binding CreateSensorCommand}"/>
                    <!--<RibbonButton x:Name="btnCreateAnimation" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateAnimation}" IsEnabled="{Binding EnableControls, FallbackValue=false}" Command="{Binding CreateAnimationCommand}" LargeImageSource="Resources/animation.png"/>-->
                    <RibbonButton x:Name="btnCreateHotkey" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateHotkey}" IsEnabled="{Binding EnableControls, FallbackValue=false}"  Command="{Binding CreateHotKeyCommand}" LargeImageSource="Resources/1465102684_preferences-desktop-keyboard-shortcuts.png"/>
                    <!--<RibbonSplitButton x:Name="btnCreateMood" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateMood}" IsEnabled="true"
                                        LargeImageSource="Resources/moods64.png" SmallImageSource="Resources/moods64.png">
                        <RibbonSplitButton.Command>local:CommandLibrary.CreateMood</RibbonSplitButton.Command>
                    </RibbonSplitButton>-->
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Settings}">
                    <RibbonButton x:Name="btnBridgeSettings" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsButton}" LargeImageSource="Resources/1417331999_Gear.png"  IsEnabled="{Binding EnableControls, FallbackValue=false}" SmallImageSource="Resources/1417331999_Gear.png" Command="{Binding ChangeBridgeSettingsCommand}"/>
                    <RibbonButton x:Name="btnUpdate" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton}" Visibility="{Binding UpdateAvailable, FallbackValue=Collapsed}" LargeImageSource="Resources/1417332335_Warning.png" IsEnabled="{Binding EnableControls, FallbackValue=false}" Command="{Binding UpdateBridgeCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Events}">
                    <RibbonButton x:Name="btnEventLog" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_EventsLogButton}" LargeImageSource="Resources/1416205084_Book_edit.png" SmallImageSource="Resources/1416205084_Book_edit.png" Command="{Binding ShowEventLogCommand}" KeyTip="E"/>
                </RibbonGroup>

            </RibbonTab>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_Tools}">
                <RibbonGroup Header="" Width="auto">
                    <RibbonSplitButton x:Name="btnCpuTempMon" Label="{x:Static resx:GUI.MainForm_ToolsTab_CpuTempMon}" CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Command="{Binding CpuTempMonCommand}"  LargeImageSource="Resources/cputemp.png" IsEnabled="{Binding EnableControls}" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding CpuTempMonSettingsCommand}" IsEnabled="{Binding CanSetCpuTempSettings}"/>
                    </RibbonSplitButton>
                    <RibbonSplitButton x:Name="btnRssFeedMon" Label="{x:Static resx:GUI.MainForm_ToolsTab_RssFeed}" CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" LargeImageSource="Resources/rss.png" IsEnabled="False" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding RssFeedMonSettingsCommand}"/>
                    </RibbonSplitButton>
                </RibbonGroup>

            </RibbonTab>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_View}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <RibbonGroup x:Name="rgViews" Header="" Width="auto">
                    <RibbonButton x:Name="btnScenesMapping" Label="{x:Static resx:GUI.MainForm_Tab_View_SceneMapping}" Command="{Binding ViewSceneMappingCommand}" LargeImageSource="Resources/SceneMapping.png" IsEnabled="{Binding EnableControls}"/>
                    <RibbonButton x:Name="btnBulbView" Label="{x:Static resx:GUI.MainForm_Tab_View_BulbsView}" Command="{Binding ViewBulbsCommand}" LargeImageSource="Resources/BulbView.png" IsEnabled="{Binding EnableControls}" />
                    <RibbonButton x:Name="btnGroupView" Label="{x:Static resx:GUI.MainForm_Tab_View_GroupsView}" Command="{Binding ViewGroupsCommand}" LargeImageSource="Resources/GroupView.png" IsEnabled="{Binding EnableControls}"/>
                </RibbonGroup>
            </RibbonTab>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_Help}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <RibbonGroup>
                    <RibbonButton Label="{x:Static resx:GUI.MainForm_Tab_Help_Website}" x:Name="btnWebsite" Click="btnWebsite_Click" LargeImageSource="Resources/1416184952_Gnome-Web-Browser-32.png" />
                    <RibbonButton Label="{x:Static resx:GUI.MainForm_Tab_Help_Forum}" x:Name="btnSupportForum" Click="btnSupportForum_Click" LargeImageSource="Resources/1416183787_Community Help.png"/>
                    <RibbonButton Label="{x:Static resx:GUI.MainForm_Tab_Help_About}" x:Name="btnAbout" LargeImageSource="Resources/unknown.png" Click="btnAbout_Click"  />
                </RibbonGroup>
            </RibbonTab>
        </Ribbon>
        <StatusBar x:Name="sbStatusBar" Height="28"  DockPanel.Dock="Bottom" HorizontalAlignment="Stretch">
            <ComboBox x:Name="cbListBridge" ItemsSource="{Binding ListBridges}" DisplayMemberPath="LongName" SelectedItem="{Binding SelectedBridge}" Visibility="{Binding MultiBridgeCB}" Width="200"/>
            <TextBlock x:Name="lblSBMessage" Text="{Binding StatusBarMessage}" Width="985" HorizontalAlignment="Stretch"  />
        </StatusBar>
        <Grid Width="{Binding Parent.ActualWidth, RelativeSource={RelativeSource Mode=Self}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="350"/>
            </Grid.ColumnDefinitions>
            <ListView x:Name="lvMainObjects" HorizontalAlignment="Stretch" ItemsSource="{Binding ListBridgeObjects, NotifyOnSourceUpdated=True}"  ScrollViewer.HorizontalScrollBarVisibility="Disabled"   SelectedItem="{Binding SelectedObject}" ContextMenuOpening="lvMainObjects_ContextMenuOpening" SelectionChanged="lvMainObjects_SelectionChanged" SelectionMode="Single" PreviewKeyUp="lvMainObjects_PreviewKeyUp">
                <ListView.Resources>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="MouseDoubleClick">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(SolidColorBrush.Color)" To="Red" Duration="0:0:.3" AutoReverse="True"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:.3" AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </ListView.Resources>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding DoubleClickObjectCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ListView.ContextMenu>
                    <ContextMenu x:Name="cmListView" IsTabStop="True">
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Identify}" IsEnabled="{Binding IsLightOrGroup}" x:Name="mnuIdentify">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Long}" IsEnabled="{Binding IsLightOrGroup}" x:Name="mnuIdentifyLong" Command="{Binding IdentifyLongCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Short}" IsEnabled="{Binding IsLightOrGroup}" x:Name="mnuIdentifyShort" Command="{Binding IdentifyShortCommand}"/>
                        </MenuItem>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ReplaceLightsState}" IsEnabled="{Binding IsValidScene}" x:Name="mnuReplaceState" Command="{Binding ReplaceCurrentStateCommand}" />
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Edit}" x:Name="mnuEdit" Command="{Binding EditObjectCommand}" IsEnabled="{Binding CanEditObject}"/>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Rename}" x:Name="mnuRenameObject" Command="{Binding RenameObjectCommand}"/>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Delete}" x:Name="mnuDeleteObject" IsEnabled="{Binding CanDeleteObject}" Command="{Binding DeleteObjectCommand}"/>
                    </ContextMenu>
                </ListView.ContextMenu>
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="5,5,5,5"/>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <WrapPanel Orientation="Vertical" Margin="5,5,5,5" Height="Auto" Width="75" SnapsToDevicePixels="True">
                            <Image Height="64" Width="64" Source="{Binding Image}" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                            <TextBlock x:Name="tblName" Text="{Binding name}"  HorizontalAlignment="Center" TextWrapping="Wrap"/>
                        </WrapPanel>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <ListView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Expander IsExpanded="True" >
                                                <Expander.Header>
                                                    <Grid Width="Auto" HorizontalAlignment="{Binding HorizontalAlignment, Mode=OneWayToSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}}" >
                                                        <Grid.Background>
                                                            <LinearGradientBrush>
                                                                <GradientStop Color="White" />
                                                                <GradientStop Color="Gray" Offset="1"/>
                                                            </LinearGradientBrush>
                                                        </Grid.Background>
                                                        <TextBlock FontWeight="Bold" FontSize="14" Text="{Binding Name}" FontStyle="Italic"/>
                                                    </Grid>
                                                </Expander.Header>
                                                <ItemsPresenter />
                                            </Expander>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </ListView.GroupStyle>
            </ListView>
            <Grid Grid.Column="1" Width="350">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" MinHeight="403"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Column="0" HorizontalAlignment="Stretch" Background="AliceBlue" Height="403" VerticalAlignment="Top">
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_HueColor}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center"/>
                    <Slider x:Name="slHue" Height="21" VerticalAlignment="Top" Maximum="65535" Margin="10,0,10,10" Width="Auto" IsSnapToTickEnabled="True" Value="{Binding SliderHue}"  IsEnabled="{Binding EnableHueSlider, FallbackValue=false}"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slHue}" IsMoveToPointEnabled="True" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseUp">
                                <i:InvokeCommandAction Command="{Binding SliderHueChangedCommand}" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <i:InvokeCommandAction Command="{Binding KeyPressHueColorCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Slider.Background>

                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1.0,0.5" >
                                <GradientStop Color="#FFFF0000" />
                                <GradientStop Color="#FEFFFF00" Offset="0.167" />
                                <GradientStop Color="#FE00FF00" Offset="0.333" />
                                <GradientStop Color="#FE00FFFF" Offset="0.5" />
                                <GradientStop Color="#FE0000FF" Offset="0.667" />
                                <GradientStop Color="#FEFF00FF" Offset="0.833" />
                                <GradientStop Color="#FFFF0000" Offset="1.0" />
                            </LinearGradientBrush>
                        </Slider.Background>
                    </Slider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_Brightness}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center"/>
                    <Slider x:Name="slBri" Height="21" VerticalAlignment="Top" Maximum="254" Margin="10,0,10,10" Width="Auto" IsSnapToTickEnabled="True" IsEnabled="{Binding EnableBriSlider, FallbackValue=false}" Value="{Binding SliderBri}"  SmallChange="1" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slBri}" IsMoveToPointEnabled="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseUp">
                                <i:InvokeCommandAction Command="{Binding SliderBriChangedCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Slider.Background>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                <GradientStop Color="White" Offset="1"/>
                                <GradientStop Color="Black" Offset="0"/>
                            </LinearGradientBrush>
                        </Slider.Background>
                    </Slider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_Saturation}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center"/>
                    <Slider x:Name="slSAT" Height="21" VerticalAlignment="Top" Maximum="254" Minimum="0" Margin="10,0,10,10" IsSnapToTickEnabled="True" IsEnabled="{Binding EnableSatSlider, FallbackValue=false}" SmallChange="1" Value="{Binding SliderSat}"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slSAT}" IsMoveToPointEnabled="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseUp">
                                <i:InvokeCommandAction Command="{Binding SliderSatChangedCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Slider.Background>
                            <LinearGradientBrush>
                                <GradientStop Color="White" x:Name="slSATStartGradient"/>
                                <GradientStop Color="{Binding SliderSatGradientEndColor}" Offset="1" x:Name="slSATEndGradient"/>
                            </LinearGradientBrush>
                        </Slider.Background>
                    </Slider>
                    <Separator Height="8" Margin="0"/>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_ColorTemp}" HorizontalAlignment="Center"  Width="350" HorizontalContentAlignment="Center"/>
                    <Slider x:Name="slCT" Height="21" VerticalAlignment="Top" Maximum="500" Margin="10,0,10,10" Width="Auto" Minimum="153" IsSnapToTickEnabled="True" IsEnabled="{Binding EnableCTSlider, FallbackValue=false}" Value="{Binding SliderCT}"  SmallChange="1"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slCT}" IsMoveToPointEnabled="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseUp">
                                <i:InvokeCommandAction Command="{Binding SliderCtChangedCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Slider.Background>
                            <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                                <GradientStop Color="#FFFF8912" Offset="0"/>
                                <GradientStop Color="#FFFFF9FD" Offset="1"/>
                            </LinearGradientBrush>
                        </Slider.Background>
                    </Slider>
                    <Grid Height="100">
                        <Label Content="{x:Static resx:GUI.MainForm_Sliders_XColorSpace}" HorizontalAlignment="Center" Margin="0,7,0,68" Width="350" HorizontalContentAlignment="Center"/>
                        <Slider x:Name="slX" Height="21" Maximum="1" Minimum="0" Margin="10,33,50,46" IsSnapToTickEnabled="True" IsEnabled="{Binding EnableXYSliders, FallbackValue=false}" Value="{Binding SliderX}"  TickFrequency="0.001" SmallChange="0.001" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slX}" AutoToolTipPrecision="3" IsMoveToPointEnabled="True">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseUp">
                                    <i:InvokeCommandAction Command="{Binding SliderXYChangedCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Slider>
                        <Label Content="{x:Static resx:GUI.MainForm_Sliders_YColorSpace}" HorizontalAlignment="Center" Margin="0,50,0,22" Width="350" HorizontalContentAlignment="Center"/>
                        <Rectangle x:Name="xyColorRec" Fill="{Binding XYRectangleColor}" Margin="0,44,10,13" Stroke="Black" ToolTip="Color Preview" HorizontalAlignment="Right" Width="35"/>
                        <Slider x:Name="slY" Height="21" Maximum="1" Minimum="0" Margin="10,72,50,7" IsSnapToTickEnabled="True" IsEnabled="{Binding EnableXYSliders, FallbackValue=false}" Value="{Binding SliderY}"  TickFrequency="0.001" SmallChange="0.001" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slY}" AutoToolTipPrecision="3" IsMoveToPointEnabled="True">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseUp">
                                    <i:InvokeCommandAction Command="{Binding SliderXYChangedCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Slider>
                        <Separator Margin="0,-1,0,93"/>
                        <Separator Margin="0,104,0,-12"/>
                        <Label x:Name="lblTT" Content="{Binding TransitionTimeTooltip, Mode=OneWay}" HorizontalAlignment="Center" Margin="0,110,0,-38" Width="350" HorizontalContentAlignment="Center"/>
                        <Slider x:Name="slTT" Height="21" Maximum="65535" Minimum="-1" Margin="10,134,10,-55" IsSnapToTickEnabled="True" IsEnabled="{Binding EnableTTSlider, FallbackValue=false}" SmallChange="1" SnapsToDevicePixels="True" Value="{Binding SliderTT}" IsMoveToPointEnabled="True" />
                    </Grid>
                </StackPanel>
                <xcad:DockingManager Grid.Row="1" Background="AliceBlue">
                    <xcad:LayoutRoot>
                        <xcad:LayoutPanel>
                            <xcad:LayoutAnchorablePane>
                                <xcad:LayoutAnchorable Title="Properties" CanClose="False" CanHide="False" CanAutoHide="False">
                                    <xctk:PropertyGrid x:Name="pgObject" IsReadOnly="True" ShowSummary="True" ShowTitle="False" ShowSortOptions="False" ShowSearchBox="False" SnapsToDevicePixels="True" SelectedObject="{Binding SelectedObject}" Margin="0,0,0,-2" VerticalContentAlignment="Stretch"  />
                                </xcad:LayoutAnchorable>
                            </xcad:LayoutAnchorablePane>
                        </xcad:LayoutPanel>
                    </xcad:LayoutRoot>
                </xcad:DockingManager>
            </Grid>
        </Grid>

        <tb:TaskbarIcon x:Name="trayicon" Height="659" VerticalAlignment="Top" ToolTipText="WinHue 3" TrayMouseDoubleClick="trayicon_TrayMouseDoubleClick">
            <!--<tb:TaskbarIcon.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Lights" x:Name="mnuLights"/>
                        <MenuItem Header="Groups" x:Name="mnuGroups"/>
                        <MenuItem Header="Scenes" x:Name="mnuScenes"/>
                    </ContextMenu>
                </tb:TaskbarIcon.ContextMenu>-->
        </tb:TaskbarIcon>

    </DockPanel>

</Window>
